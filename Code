/*
BankWise is a MySQL-based mini-project simulating a banking environment. 
It contains key modules like Customers, Accounts, Transactions, Loans, Branches, and Cards. 
The purpose of this project is to showcase real-world data management and advanced SQL operations 
such as joins, indexing, triggers, ranking functions, views, and data cleaning using NULL handling.
*/

CREATE DATABASE Banking;
USE Banking;

SET SQL_SAFE_UPDATES = 1;

CREATE TABLE Customers (
    customer_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100),
    email VARCHAR(100),
    phone VARCHAR(15),
    city VARCHAR(50),
    dob DATE
);

INSERT INTO Customers (name, email, phone, city, dob) VALUES
('Arun Kumar', 'arun.k@example.com', '9876543210', 'Chennai', '1995-06-21'),
('Divya R', NULL, '9845012345', 'Bangalore', '1993-04-15'),
('Praveen S', 'praveens@example.com', NULL, 'Hyderabad', '1990-11-30'),
('Meena G', 'meena.g@example.com', '9988776655', 'Delhi', '1988-09-05'),
('Ravi Teja', NULL, NULL, 'Hyderabad', '1992-12-10'),
('Sneha B', 'sneha.b@example.com', '9898989898', 'Mumbai', '1991-03-22'),
('Karthik V', 'karthikv@example.com', '9900112233', NULL, '1989-07-14'),
('Lavanya S', 'lavs@example.com', NULL, 'Chennai', NULL),
('Vignesh R', NULL, NULL, 'Madurai', '1994-02-02'),
('Swathi D', 'swathid@example.com', '9871122334', 'Coimbatore', '1993-08-09');

CREATE TABLE Branches (
    branch_id INT PRIMARY KEY AUTO_INCREMENT,
    branch_name VARCHAR(100),
    city VARCHAR(50),
    ifsc_code VARCHAR(20) UNIQUE
);

INSERT INTO Branches (branch_name, city, ifsc_code) VALUES
('Chennai Main', 'Chennai', 'CHN001'),
('Bangalore Central', 'Bangalore', 'BLR002'),
('Hyderabad North', 'Hyderabad', 'HYD003'),
('Delhi South', 'Delhi', 'DEL004'),
('Mumbai East', 'Mumbai', 'MUM005');

CREATE TABLE Accounts (
    account_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    branch_id INT,
    account_type VARCHAR(20),
    balance DECIMAL(12,2),
    opened_on DATE,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    FOREIGN KEY (branch_id) REFERENCES Branches(branch_id),
    INDEX (customer_id),
    INDEX (branch_id)
);

INSERT INTO Accounts (customer_id, branch_id, account_type, balance, opened_on) VALUES
(1, 1, 'Savings', 25000.00, '2022-01-01'),
(2, 2, 'Current', NULL, '2021-05-12'),
(3, 3, 'Savings', 3000.00, '2023-02-28'),
(4, 4, 'Current', 18000.50, '2020-11-05'),
(5, 3, 'Savings', 500.00, '2023-01-20'),
(6, 5, 'Savings', NULL, '2022-06-15'),
(7, 2, 'Current', 70000.00, NULL),
(8, 1, 'Savings', 12000.00, '2021-08-09'),
(9, 4, 'Savings', NULL, '2022-04-01'),
(10, 5, 'Current', 8500.00, '2023-07-01');

CREATE TABLE Cards (
    card_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    card_type VARCHAR(20),
    card_number VARCHAR(16) UNIQUE,
    expiry_date DATE,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    INDEX (card_type)
);

INSERT INTO Cards (customer_id, card_type, card_number, expiry_date) VALUES
(1, 'Debit', '4111111111111111', '2026-06-01'),
(2, 'Credit', '4222222222222222', '2025-12-01'),
(3, 'Debit', '4333333333333333', NULL),
(4, 'Debit', '4444444444444444', '2027-09-01'),
(5, 'Credit', '4555555555555555', NULL),
(6, 'Debit', '4666666666666666', '2026-03-01'),
(7, 'Credit', '4777777777777777', '2024-08-01'),
(8, 'Debit', '4888888888888888', '2025-11-01');

CREATE TABLE Transactions (
    transaction_id INT PRIMARY KEY AUTO_INCREMENT,
    account_id INT,
    amount DECIMAL(10,2),
    transaction_type VARCHAR(10), -- Credit/Debit
    transaction_date DATE,
    FOREIGN KEY (account_id) REFERENCES Accounts(account_id),
    INDEX (transaction_date),
    INDEX (transaction_type)
);

INSERT INTO Transactions (account_id, amount, transaction_type, transaction_date) VALUES
(1, 5000.00, 'Credit', '2023-06-01'),
(1, 1000.00, 'Debit', '2023-06-02'),
(2, 7000.00, 'Credit', '2023-06-03'),
(2, NULL, 'Debit', '2023-06-04'),
(3, 250.00, 'Credit', '2023-06-05'),
(4, 2000.00, 'Credit', '2023-06-06'),
(4, 500.00, 'Debit', NULL),
(5, NULL, 'Credit', '2023-06-08'),
(6, 3500.00, 'Debit', '2023-06-09'),
(7, 10000.00, 'Credit', '2023-06-10'),
(7, 2000.00, 'Debit', '2023-06-11'),
(8, NULL, NULL, '2023-06-12'),
(9, 2500.00, 'Credit', '2023-06-13'),
(10, 1000.00, 'Debit', '2023-06-14'),
(3, 500.00, 'Credit', NULL),
(1, 1500.00, 'Debit', '2023-06-16'),
(2, 3000.00, 'Credit', '2023-06-17'),
(5, 100.00, 'Debit', NULL),
(6, 2000.00, 'Credit', '2023-06-19'),
(4, NULL, 'Debit', '2023-06-20');

CREATE TABLE Loans (
    loan_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    loan_type VARCHAR(50),
    loan_amount DECIMAL(12,2),
    interest_rate DECIMAL(4,2),
    approved_date DATE,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    INDEX (loan_type)
);

INSERT INTO Loans (customer_id, loan_type, loan_amount, interest_rate, approved_date) VALUES
(1, 'Home Loan', 1000000.00, 8.5, '2021-01-01'),
(2, 'Car Loan', 500000.00, NULL, '2021-06-15'),
(3, 'Education Loan', NULL, 7.2, '2022-03-01'),
(4, 'Personal Loan', 200000.00, 12.0, '2023-01-10'),
(5, 'Home Loan', NULL, NULL, NULL),
(6, 'Car Loan', 300000.00, 9.0, '2020-08-01'),
(7, 'Education Loan', 250000.00, 6.5, NULL),
(8, 'Personal Loan', 150000.00, NULL, '2023-05-01');

/* 
 1. How many customers have NULL values in their email?
 2. How can you replace NULL balances in the Accounts table with 0?
 3. Rank all customers based on their account balance (highest to lowest).
 4. Create a trigger to log transactions greater than ₹10,000 into a separate table.
 5. How do you improve the performance of searching transactions by account_id?
 6. Create a view to display total account balance in each branch.
 7. Count how many email entries are missing in the Customers table.
 8. Display all transactions that happened in the last 30 days.
 9. Find the highest transaction amount for each account.
 10. Categorize account holders as 'Basic', 'Standard', or 'Premium' based on balance using CASE.
 11. List all customers who have never made any transaction.
 12. Count the number of customers per branch.
 13. For each account, calculate total credit and debit amounts.
 14. Create a view that displays loan records missing key information.
 15. Show the running total of transaction amounts for each account (ordered by date).
 16. Find the average loan amount for each loan type (excluding NULL values).
 17. List customers who do not have any bank cards.
 18. Create a trigger that prevents any debit transaction that would cause a negative balance.
 19. Display the 5 oldest customers in the bank.
 20. Identify customers who hold more than one account.
*/


-- 1. How many customers have NULL values in their email? --

UPDATE Customers
SET email = 'noemail@bank.com'
WHERE email IS NULL;

-- 2. How can you replace NULL balances in the Accounts table with 0? --

UPDATE Accounts
SET balance = 0
WHERE balance IS NULL;

-- 3. Rank all customers based on their account balance (highest to lowest). --

SELECT c.name, a.balance,
RANK() OVER (ORDER BY a.balance DESC) AS balance_rank
FROM Customers c
JOIN Accounts a ON c.customer_id = a.customer_id;

--  4. Create a trigger to log transactions greater than ₹10,000 into a separate table. --

CREATE TABLE HighValueLogs (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    account_id INT,
    amount DECIMAL(10,2),
    log_date DATETIME DEFAULT NOW()
);

DELIMITER //
CREATE TRIGGER log_high_value AFTER INSERT ON Transactions
FOR EACH ROW
BEGIN
  IF NEW.amount > 10000 THEN
    INSERT INTO HighValueLogs(account_id, amount)
    VALUES (NEW.account_id, NEW.amount);
  END IF;
END;
//
DELIMITER ;

--  5. How do you improve the performance of searching transactions by account_id? --

CREATE INDEX idx_account_id ON Transactions(account_id);

-- 6. Create a view to display total account balance in each branch.--

CREATE VIEW BranchBalances AS
SELECT b.branch_name, SUM(a.balance) AS total_balance
FROM Branches b
JOIN Accounts a ON b.branch_id = a.branch_id
GROUP BY b.branch_name;

SELECT * FROM BranchBalances;

-- 7. Count how many email entries are missing in the Customers table.--

SELECT COUNT(*) AS null_emails
FROM Customers
WHERE email IS NULL;

--  8. Display all transactions that happened in the last 30 days. --

SELECT * FROM Transactions
WHERE transaction_date >= CURDATE() - INTERVAL 30 DAY;

--  9. Find the highest transaction amount for each account. --

SELECT account_id, MAX(amount) AS max_amount
FROM Transactions
GROUP BY account_id;

--  10. Categorize account holders as 'Basic', 'Standard', or 'Premium' based on balance using CASE. --

SELECT account_id, 
       CASE 
         WHEN balance >= 50000 THEN 'Premium'
         WHEN balance BETWEEN 10000 AND 49999 THEN 'Standard'
         ELSE 'Basic'
       END AS account_category
FROM Accounts;

--  11. List all customers who have never made any transaction. --

SELECT name FROM Customers
WHERE customer_id NOT IN (
    SELECT a.customer_id
    FROM Accounts a
    JOIN Transactions t ON a.account_id = t.account_id
);

--  12. Count the number of customers per branch. --

SELECT b.branch_name, COUNT(a.account_id) AS customer_count
FROM Branches b
JOIN Accounts a ON b.branch_id = a.branch_id
GROUP BY b.branch_name;

--  13. For each account, calculate total credit and debit amounts. --

SELECT account_id,
SUM(CASE WHEN transaction_type = 'Credit' THEN amount ELSE 0 END) AS total_credit,
SUM(CASE WHEN transaction_type = 'Debit' THEN amount ELSE 0 END) AS total_debit
FROM Transactions
GROUP BY account_id;

--  14. Create a view that displays loan records missing key information. --

CREATE VIEW IncompleteLoans AS
SELECT * FROM Loans
WHERE loan_amount IS NULL OR interest_rate IS NULL OR approved_date IS NULL;

SELECT * FROM IncompleteLoans;

--  15. Show the running total of transaction amounts for each account (ordered by date). --

SELECT account_id, transaction_date, amount,
SUM(amount) OVER (PARTITION BY account_id ORDER BY transaction_date) AS running_total
FROM Transactions;

--  16. Find the average loan amount for each loan type (excluding NULL values). --

SELECT loan_type, AVG(loan_amount) AS avg_loan
FROM Loans
WHERE loan_amount IS NOT NULL
GROUP BY loan_type;
 
-- 17. List customers who do not have any bank cards. --

SELECT name FROM Customers
WHERE customer_id NOT IN (
  SELECT customer_id FROM Cards
);

--  18. Create a trigger that prevents any debit transaction that would cause a negative balance. --

DELIMITER //
CREATE TRIGGER prevent_negative_balance BEFORE INSERT ON Transactions
FOR EACH ROW
BEGIN
  IF NEW.transaction_type = 'Debit' THEN
    DECLARE current_balance DECIMAL(10,2);
    SELECT balance INTO current_balance FROM Accounts WHERE account_id = NEW.account_id;
    IF current_balance < NEW.amount THEN
      SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = 'Insufficient funds!';
    END IF;
  END IF;
END;
//
DELIMITER ;

--  19. Display the 5 oldest customers in the bank. --

SELECT Name,dob FROM CUSTOMERS
ORDER BY dob ASC LIMIT 5;

--  20. Identify customers who hold more than one account. --

SELECT customer_id, COUNT(*) AS num_accounts
FROM Accounts
GROUP BY customer_id
HAVING COUNT(*) > 1;
